type: edu
files:
- name: src/cinema/Main.java
  visible: true
  text: |
    package cinema;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;

    @SpringBootApplication
    public class Main {
        public static void main(String[] args) {
            SpringApplication.run(Main.class, args);
        }
    }
  learner_created: false
- name: build.gradle
  visible: true
  text: |-
    buildscript {
        repositories {
            mavenCentral()
        }
        dependencies {
            classpath "org.springframework.boot:spring-boot-gradle-plugin:$hs.spring.bootVersion"
            classpath "io.spring.gradle:dependency-management-plugin:$hs.spring.dependencyManagementVersion"
        }
    }

    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
    }
  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |-
    server.port=28852
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
  learner_created: false
- name: test/CinemaTests.java
  visible: false
  text: |-
    import cinema.Main;
    import com.google.gson.Gson;
    import com.google.gson.JsonObject;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import java.util.Map;
    import java.util.UUID;

    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.*;

    public class CinemaTests extends SpringTest {

        private static final String ALREADY_PURCHASED_ERROR_MESSAGE = "The ticket has been already purchased!";
        private static final String OUT_OF_BOUNDS_ERROR_MESSAGE = "The number of a row or a column is out of bounds!";
        private static final String WRONG_TOKEN_ERROR_MESSAGE = "Wrong token!";

        private static final Gson gson = new Gson();

        public CinemaTests() {
            super(Main.class);
        }

        private static void checkStatusCode(HttpResponse resp, int status) {
            if (resp.getStatusCode() != status) {
                throw new WrongAnswer(
                    resp.getRequest().getMethod() + " " +
                        resp.getRequest().getLocalUri() +
                        " should respond with status code " + status + ", " +
                        "responded: " + resp.getStatusCode() + "\n\n" +
                        "Response body:\n\n" + resp.getContent()
                );
            }
        }

        CheckResult testEndpoint() {
            HttpResponse response = get("/seats").send();
            checkStatusCode(response, 200);
            return CheckResult.correct();
        }

        CheckResult testEndpointAvailableSeats() {
            HttpResponse response = get("/seats").send();
            expect(response.getContent()).asJson().check(
                isObject()
                    .value("available_seats",
                        isArray(
                            81,
                            isObject()
                                .value("row", isInteger(i -> i >= 1 && i <= 9))
                                .value("column", isInteger(i -> i >= 1 && i <= 9))
                                .value("price", isInteger(price -> price == 10 || price == 8))
                        )
                    )
                    .value("total_columns", 9)
                    .value("total_rows", 9)
            );
            return CheckResult.correct();
        }

        CheckResult testPurchaseTicket() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 1)
                                .value("column", 1)
                                .value("price", 10)
                        )
                );
            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatTicketHasBeenPurchased() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", ALREADY_PURCHASED_ERROR_MESSAGE)
                        .anyOtherValues()
                );
            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatNumbersOutOfBounds() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "10",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "10"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "-1",
                    "column", "-1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );


            return CheckResult.correct();
        }

        CheckResult testReturnTicket() {

            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", 2,
                    "column", 5
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 2)
                                .value("column", 5)
                                .value("price", 10)
                        )
                );

            JsonObject jsonResponse = gson.fromJson(response.getContent(), JsonObject.class);

            String tokenFromResponse = jsonResponse.get("token").getAsString();
            String wrongToken = UUID.randomUUID().toString();

            response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", wrongToken
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("error", WRONG_TOKEN_ERROR_MESSAGE)
                    .anyOtherValues()
            );

            response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", tokenFromResponse
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("returned_ticket",
                        isObject()
                            .value("row", 2)
                            .value("column", 5)
                            .value("price", 10)
                    )
            );

            return CheckResult.correct();
        }

        @DynamicTest
        DynamicTesting[] dynamicTests = new DynamicTesting[]{
            this::testEndpoint,
            this::testEndpointAvailableSeats,
            this::testPurchaseTicket,
            this::testErrorMessageThatTicketHasBeenPurchased,
            this::testErrorMessageThatNumbersOutOfBounds,
            this::testReturnTicket
        };
    }
  learner_created: false
- name: src/cinema/model/Seat.java
  visible: true
  text: |+
    package cinema.model;

    public class Seat {

        private  int row;
        private  int column;

        private int price;

        public int getPrice() {
            return price;
        }

        public void setPrice(int price) {
            this.price = price;
        }
    // private boolean isBooked = false;

        public Seat() {
        }

        public Seat(int row, int column, int price) {
            this.row = row;
            this.column = column;
            this.price = price;
        }

        public int getRow() {
            return row;
        }

        public void setRow(int row) {
            this.row = row;
        }

        public int getColumn() {
            return column;
        }

        public void setColumn(int column) {
            this.column = column;
        }


    }



  learner_created: true
- name: src/cinema/model/Cinema.java
  visible: true
  text: |
    package cinema.model;
    import java.util.List;



    public class Cinema{

        private int total_rows;
        private int total_columns;
        private List<Seat> available_seats;




        public Cinema() {
        }

        public Cinema(int total_rows, int total_columns, List<Seat> available_seats) {
            this.total_rows = total_rows;
            this.total_columns = total_columns;
            this.available_seats = available_seats;
        }

        public int getTotal_rows() {
            return total_rows;
        }

        public void setTotal_rows(int total_rows) {
            this.total_rows = total_rows;
        }

        public int getTotal_columns() {
            return total_columns;
        }

        public void setTotal_columns(int total_columns) {
            this.total_columns = total_columns;
        }

        public List<Seat> getAvailable_seats() {
            return available_seats;
        }

        public void setAvailable_seats(List<Seat> available_seats) {
            this.available_seats = available_seats;
        }
    }
  learner_created: true
- name: src/cinema/model/ErrorMesssage.java
  visible: true
  text: |
    package cinema.model;

    public class ErrorMesssage {

        String error;

        public ErrorMesssage(String error) {
            this.error = error;
        }

        public ErrorMesssage() {
        }

        public String getError() {
            return error;
        }

        public void setError(String error) {
            this.error = error;
        }
    }
  learner_created: true
- name: src/cinema/controller/CinemaController.java
  visible: true
  text: |
    package cinema.controller;


    import cinema.model.Cinema;
    import cinema.model.ErrorMesssage;
    import cinema.model.Seat;
    import cinema.model.Ticket;
    import cinema.service.CinemaService;
    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;
    import org.springframework.web.bind.annotation.*;

    @RestController
    @RequestMapping()
    public class CinemaController {

        private final CinemaService cinemaService;

        public CinemaController(CinemaService cinemaService) {
            this.cinemaService = cinemaService;
        }

        @GetMapping("/seats")
        public Cinema getCinemaInfos() {
            return cinemaService.getCinemaInfos();

        }

        @PostMapping("/purchase")
        public Object buyTicket(@RequestBody Seat seat) {

            Object response = null;

            if (!cinemaService.isInCinema(seat)) {
                response = new ErrorMesssage("The number of a row or a column is out of bounds!");
                return new ResponseEntity<>(response, HttpStatus.BAD_REQUEST);

            } else if (cinemaService.isSeatTaken(seat)) {
                response = new ErrorMesssage("The ticket has been already purchased!");
                return new ResponseEntity<>(response, HttpStatus.BAD_REQUEST);
            } else {
                response = cinemaService.buyTicket(seat);
                return new ResponseEntity<>(response, HttpStatus.OK);
            }
        }
    }
  learner_created: true
- name: src/cinema/service/CinemaService.java
  visible: true
  text: |
    package cinema.service;


    import cinema.model.Cinema;
    import cinema.model.ErrorMesssage;
    import cinema.model.Seat;
    import cinema.model.Ticket;
    import cinema.repository.CinemaRepository;
    import org.springframework.stereotype.Service;


    @Service
    public class CinemaService {


        private final CinemaRepository cinemaRepository;

        public CinemaService(CinemaRepository cinemaRepository) {
            this.cinemaRepository = cinemaRepository;
        }

        public Cinema getCinemaInfos() {
            return cinemaRepository.getCinema();

        }

        public boolean isInCinema(Seat seat) {

            return cinemaRepository.isInCinema(seat);
        }

        public boolean isSeatTaken(Seat seat) {
            return cinemaRepository.isSeatTaken(seat);
        }


        public Object buyTicket(Seat seat) {

            cinemaRepository.bookTicket(seat);
            Ticket currentTicket = new Ticket();
            currentTicket.setColumn(seat.getColumn());
            currentTicket.setRow(seat.getRow());
            if (seat.getRow() > 4) {
                currentTicket.setPrice(8);
            } else {
                currentTicket.setPrice(10);
            }

            return currentTicket;


        }
    }
  learner_created: true
- name: src/cinema/model/Ticket.java
  visible: true
  text: |
    package cinema.model;

    public class Ticket {

        int row;
        int column;
        int price;

        public int getRow() {
            return row;
        }

        public void setRow(int row) {
            this.row = row;
        }

        public int getColumn() {
            return column;
        }

        public void setColumn(int column) {
            this.column = column;
        }

        public int getPrice() {
            return price;
        }

        public void setPrice(int price) {
            this.price = price;
        }

        public Ticket(int row, int column, int price) {
            this.row = row;
            this.column = column;
            this.price = price;
        }

        public Ticket() {
        }
    }
  learner_created: true
- name: src/cinema/repository/CinemaRepository.java
  visible: true
  text: |+
    package cinema.repository;

    import cinema.model.Cinema;
    import cinema.model.Seat;
    import org.springframework.stereotype.Component;

    import java.util.ArrayList;
    import java.util.List;

    @Component
    public class CinemaRepository {

        private Cinema cinema = new Cinema();

        public CinemaRepository() {
            cinema.setTotal_rows(9);
            cinema.setTotal_columns(9);

            List<Seat> available_seats = new ArrayList<>();
            for (int i = 1; i <= 9; i++) {
                for (int j = 1; j <= 9; j++) {
                    if(i > 4 ) {
                        available_seats.add(new Seat(i, j,8));
                    }
                    else{
                        available_seats.add(new Seat(i, j,10));
                    }

                }
            }
            cinema.setAvailable_seats(available_seats);



        }

        public Cinema getCinema() {
            return cinema;
        }

        public void bookTicket(Seat seat) {

            List<Seat> temp = new ArrayList<>();


            for (Seat place : cinema.getAvailable_seats()) {
                if (seat.getRow() == place.getRow() && seat.getColumn() == place.getColumn()) {
                    //temp.remove(place);
                    continue;
                }
                temp.add(place);

            }
            cinema.setAvailable_seats(temp);
        }


        public boolean isSeatTaken(Seat seat) {
            for (Seat place : cinema.getAvailable_seats()) {

                if (seat.getRow() == place.getRow() && seat.getColumn() == place.getColumn()) {
                    return false;

                }

            }

            return true;

        }

        public boolean isInCinema(Seat seat) {
            if (seat.getRow() > cinema.getTotal_rows() || seat.getColumn() > cinema.getTotal_columns()) {
                return false;
            }
            if(seat.getRow() < 1 || seat.getColumn() < 1) {
                return false;
            } else {
                return true;
            }
        }


    }




  learner_created: true
feedback_link: https://hyperskill.org/learn/step/13377#comment
status: Unchecked
record: -1
